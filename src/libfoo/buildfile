int_libs = # Interface dependencies.
imp_libs = # Implementation dependencies.
#import imp_libs += libhello%lib{hello}

inc = [dir_path] ../../include/libfoo/

lib{foo}: {hxx ixx txx cxx}{**  -config} hxx{config}       \
     $inc/{hxx ixx txx    }{** -version} $inc/hxx{version} \
          $imp_libs $int_libs

# Public headers.
#
$inc/
{
  # Include the generated version header into the distribution (so that we
  # don't pick up an installed one) and don't remove it when cleaning (so that
  # clean results in a state identical to distributed).
  #
  hxx{version}: in{version} $src_root/manifest
  {
    dist  = true
    clean = ($src_root != $out_root)
  }

  # Install public headers into the libfoo/ subdirectory of, say, /usr/include/
  # recreating subdirectories.
  #
  {hxx ixx txx}{*}:
  {
    install         = include/libfoo/
    install.subdirs = true
  }
}

hxx{config}: in{config}
{
  HELLO = "Hi"
}

# Build options.
#
cxx.poptions =+ "-I$out_root/src/"     "-I$src_root/src/"     \
                "-I$out_root/include/" "-I$src_root/include/"

obja{*}: cxx.poptions += -DLIBFOO_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBFOO_SHARED_BUILD

# Export options.
#
lib{foo}:
{
  cxx.export.poptions = "-I$out_root/include/" "-I$src_root/include/"
  cxx.export.libs = $int_libs
}

liba{foo}: cxx.export.poptions += -DLIBFOO_STATIC
libs{foo}: cxx.export.poptions += -DLIBFOO_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{foo}: bin.lib.version = @"-$version.project_id"
else
  lib{foo}: bin.lib.version = @"-$version.major.$version.minor"

# Don't install private headers.
#
{hxx ixx txx}{*}: install = false
